#!/usr/bin/env bash

#
# Set up reverse tunnel for RDP protocol, automated.
#
# IMPORTANT:
#
# * Host machine IP changes per every WSL restart, be careful. See `C_L_HOST`.
# * Make sure the remote SSH server has `GatewayPorts clientspecified` in its
#   `/etc/ssh/sshd_config`.
#
# NOTES:
#
# * This is a "chunky Bash" script.
#

# Get script name & path.
SN=${0##*/}
SP=${0%/*}

# Set strict mode.
set -u -o pipefail

# Data, absolute. See notes in `cmd_start`.
ADATA="`realpath ${SP}`/${SN}.d"

# WARNING! Cd to data directory and stay there.
# IMPORTANT! See notes in `cmd_start`.
cd "${ADATA}" || exit 1

#--------------------------------------- Configuration

. conf.sh || exit 1

#--------------------------------------- Functions

check_key() {
  if [ ! -r "${C_KEY}" ]; then
    echo "Error: SSH key not found: ${C_KEY}" >&2
    return 1
  fi

  return 0
}

# Print PID from the file. Return 0 if pidfile exists.
get_pid() {
  cat autossh.pid 2>/dev/null
}

# Return 0 if debugging is enabled.
is_debug() {
  [ "${DEBUG:-}" = "!" ]
}

# Return 0 if AutoSSH is running.
is_running() {
  local PID=`get_pid`
  test -n "${PID}" || return 1    # If empty, that's a "missing PID" anyway.
  kill -s 0 ${PID} 2>/dev/null
}

# Return 0 if running in sillytest mode.
is_sillytest() {
  [ "${SILLYTEST:-}" = "!" ]
}

# DEBUG: Print result.
# $1: (optional) Label.
pr() {
  echo "pr(): label:${1:-} res:$?"
}

sleep_n_status() {
  sleep 0.5
  cmd_status
}

#--------------------------------------- Commands

cmd_log() {
  tail -f autossh.log
}

cmd_start() {
  # IMPORTANT! Due to AutoSSH specifics, full paths to everything need to be specified.
  #   Thus, `${DATA}` is stuffed all over the place where needed.

  check_key || return 1

  if is_running; then
    echo "AutoSSH is already running, PID `get_pid`"    # Not an error.
    return 0
  fi

  # AutoSSH mode.
  AM=(
    # No monitoring.
    -M 0

    # Fork to the background.
    # NOTE: This affects SSH execution mode greatly.
    -f
  )

  # SSH options.
  O=(
    -i ${ADATA}/${C_KEY}
    -R 0.0.0.0:${C_R_PORT}:${C_L_HOST}:${C_L_PORT}
    -C -N   # Compress, no shell.

    # Connection params.
    -o "ServerAliveInterval 5"
    -o "ServerAliveCountMax 2"
  )

  if is_debug; then
    O+=( -v )
  else
    O+=( -q )
  fi

  echo "Starting AutoSSH"

  is_debug && set -x
  export AUTOSSH_LOGFILE="autossh.log"
  export AUTOSSH_PIDFILE="${ADATA}/autossh.pid"    # MUST be full absolute path. AutoSSH glitch.
  autossh "${AM[@]}" ${C_USER}@${C_HOST} "${O[@]}"

  sleep_n_status
}

cmd_status() {
  if is_running; then
    echo "AuthSSH is running, PID `get_pid`"
  else
    echo "AutoSSH is not running"
    false
  fi
}

cmd_stop() {
  if ! is_running; then
    echo "Error: AutoSSH is not running" >&2
    return 1
  fi

  echo "Stopping AutoSSH, PID `get_pid`"
  kill `get_pid`

  sleep_n_status
}

cmd_usage() {
  echo "USAGE: ${SN} <log|start|status|stop>"
}

#--------------------------------------- Sillytest

sillytest() {
  true
  #cmd_start
  #cmd_status

  #is_running
  #pr "is_running"

  #print_pid
  #pr "print_pid"
}

#--------------------------------------- Main

if is_sillytest; then
  echo "Sillytest start"
  sillytest
  echo "Sillytest end"
  exit 1
fi

CMD="${1:-}"

case "$CMD" in
"log"|"start"|"status"|"stop")
  cmd_${CMD}
  ;;
*)
  cmd_usage
  exit 1
  ;;
esac

# No more commands after this line -- retain command result.
